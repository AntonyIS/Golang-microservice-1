version: '3'

services:   
    api:
        container_name: backend
        build:
            dockerfile: Dockerfile
            context: ./backend
        ports: 
            - "5000"
        restart: on-failure
        volumes:
            - api:/usr/src/app/
        depends_on:
            - postgresql-db
        deploy:
            replicas: 5
        
    client:
        container_name: client
        stdin_open: true
        environment:
            - CHOKIDAR_USEPOLLING=true
        build:
            dockerfile: Dockerfile
            context: ./client
        volumes:
            - /app/node_modules
            - ./client:/app

        ports: 
            - "3000:3000"

    # # nginx container
    nginx:
        # specifies the latest nginx image
        image: nginx:latest
        # Connects the conf file of the container to the conf file in our folder
        # container name 
        
        container_name: nginx
        volumes:
            - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
        # It will start up the nginx only when all api containers have started
        depends_on: 
            - api
        # Connects the port 80 of the nginx container to localhost:80 or localhost
        ports: 
            - "8080:8080"
        # networks: 
        #     - golang-microservice-1-network
            
    postgresql-db:
        container_name: postgresql-db
        restart: always
        image: postgres:latest
        ports:
            - '5432:5432'
        environment:
            - POSTGRES_USER=${DB_USER}  
            - POSTGRES_PASSWORD=${DB_PASSWORD}
            - POSTGRES_DB=${DB_NAME}
            - DATABASE_HOST=${DB_HOST} 
       
        volumes:
            - database_postgres:/var/lib/postgresql/data

       
      
volumes:
    api:
    database_postgres: 
        
# Networks to be created to facilitate communication between containers
networks:
    golang-microservice-1-network:
      driver: bridge



        
